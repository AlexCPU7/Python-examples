'''
=== Восстановление перестановки ===

Владислав придумал новый алгоритм построения распределенного ключа.

Распределенный ключ состоит из 2n численных последовательностей длины n. Для построение ключа используется случайная перестановка p из n2 элементов. Элементы перестановки p записываются построчно в квадратную матрицу a. Первые n элементов записываются в первую строку матрицы, следующие n элементов записываются во вторую строку и т.д. Затем выписываются 2n последовательностей длины n — строки и столбцы матрицы a.

Владиславу даны эти 2n последовательностей в каком-то произвольном порядке. Он долго думал над тем, чтобы придумать алгоритм для восстановления перестановки. Успейте восстановить перестановку до конца раунда!

Формат ввода
В первой строке входных данных записано одно целое число n (1 ≤ n ≤ 100).

Далее в каждой из 2n строк записано n целых чисел от 1 до n2 — строки и столбцы матрицы a в некотором порядке.

Гарантируется, что входные данные корректны, т.е. существует не менее одной подходящей перестановки p.

Формат вывода
Выведите перестановку чисел от 1 до n2, которую вы восстановили.

Пример 1
Ввод	    Вывод
2           1 2 3 4
1 2
1 3
2 4
3 4

Пример 2
Ввод	    Вывод
4           5 4 1 13 8 3 6 16 15 9 14 12 11 2 7 10
1 6 14 7
5 4 1 13
13 16 12 10
8 3 6 16
11 2 7 10
15 9 14 12
4 3 9 2
5 8 15 11

'''

from random import sample

ticket = int(input())   #число в квадрате
resTickets = ticket * ticket

allList = list(range(resTickets))
mas = []
for i in range(resTickets):
    randList = sample(allList, ticket)

    for item in randList:
        if item not in mas:
            mas += [item]

print(mas)